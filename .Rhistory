} "
data_jags = list(calls=dat$calls, age=dat$age,isgroup2=dat$isgroup2)
params = c("lam", "b0", "b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
mod_sim = coda.samples(model=mod,
variable.names=params,
n.iter=5e3)
mod_csim = as.mcmc(do.call(rbind, mod_sim))
data_jags = as.list(dat)
params = c("lam", "b0", "b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
mod_sim = coda.samples(model=mod,
variable.names=params,
n.iter=5e3)
mod_csim = as.mcmc(do.call(rbind, mod_sim))
summary(mod_csim)
data_jags = as.list(dat)
params = c("b0", "b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
mod_sim = coda.samples(model=mod,
variable.names=params,
n.iter=5e3)
mod_csim = as.mcmc(do.call(rbind, mod_sim))
summary(mod_csim)
(pmed_coef = apply(mod_csim, 2, median))
loglamb = pmed_coef["b0"] + 29*pmed_coef["b[1]"]+1*pmed_coef["b[2]"]
lamb_hat = exp(loglamb)
lamb_hat = lamb_hat*30
lamb_hat
length(dat)
length(dat$calls)
calls_hat = rpois(length(dat$calls),lamb_hat)
plot(calls_hat)
ppois(3,lamb_hat )
lamb_hat
exp(loglamb)
loglamb = loglamb = mod_csim[,"b0"] + 29*mod_csim[,"b[1]"]+1*mod_csim[,"b[2]"]
lamb_hat = exp(loglamb)
lamb_hat = lamb_hat*30
head(lamb_hat)
calls_hat - rpois(length(lamb_hat),lamb_hat)
length(lamb_hat)
calls_hat = rpois(length(lamb_hat),lamb_hat)
mean(calls_hat>3)
length(calls_hat)
mean(lamb_hat)
ppois(3,mean(lamb_hat))
mean(calls_hat<=3)
mean(calls_hat>=3)
library("coda")
library("rjags")
data("BOD")
str(BOD)
hist(BOD$demand)
hist(BOD$time)
hist(BOD$Time)
plot(BOD$Time~BOD$demand)
data("esoph")
str(esoph)
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
head(dat)
mod2_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = int[treatment[i]] + b[1]*neutrons[i]
}
for (k in 1:max(treatment)) {
int[k] ~ dnorm(mu, prec)
}
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
mu ~ dnorm(0, 1.0/1e4)
prec ~ dgamma(1.0,1.0)
sig = 1/sqrt(prec)
} "
data2_jags = list(neutrons = dat$V1, treatment = dat$V2, died = dat$V3)
params2 = c("int","b","mu","sig")
mod2 = jags.model(textConnection(mod2_string), data=data2_jags, n.chains=3)
update(mod2, 1e3)
mod2_sim = coda.samples(model=mod2,
variable.names=params2,
n.iter=1e4)
mod2_csim = as.mcmc(do.call(rbind, mod2_sim))
windows()
plot(mod2_sim,ask=T)
gelman.diag(mod2_sim)
dic2 = dic.samples(mod2, n.iter=1e3)
dic2
mod2_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = int[treatment[i]] + b[1]*neutrons[i]
}
for (k in 1:max(treatment)) {
int[k] ~ dnorm(mu, prec)
}
b[1] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
mu ~ dnorm(0, 1.0/1e4)
prec ~ dgamma(1.0,1.0)
sig = 1/sqrt(prec)
} "
data2_jags = list(neutrons = dat$V1, treatment = dat$V2, died = dat$V3)
params2 = c("int","b","mu","sig")
mod2 = jags.model(textConnection(mod2_string), data=data2_jags, n.chains=3)
update(mod2, 1e3)
mod2_sim = coda.samples(model=mod2,
variable.names=params2,
n.iter=1e4)
mod2_csim = as.mcmc(do.call(rbind, mod2_sim))
windows()
plot(mod2_sim,ask=T)
plot(dat$V3~dat$V2)
plot(dat$V3,jitter(dat$V2))
mean(int[1]>int[2])
mean(mod2_csim[,"int[1]"]>mod2_csim[,"int[2]"])
mean(mod2_csim[,"int[1]"]<mod2_csim[,"int[2]"])
windows()
plot(mod2_sim,ask=T)
plot(x,dgamma(x,1.0,1.0))
x=seq(0,10,0.01)
plot(x,dgamma(x,1.0,1.0))
plot(x,dgamma(x,1.0,1/2))
plot(x,dexp(x,1.0))
plot(x,dexp(x,2.0))
plot(x,dexp(x,0.5))
plot(x,dexp(x,0.1))
mod2_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = int[treatment[i]] + b[1]*neutrons[i]
}
for (k in 1:max(treatment)) {
int[k] ~ dnorm(mu, prec)
}
b[1] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
mu ~ dnorm(0, 1.0/1e4)
prec ~ dexp(0.1)
sig = 1/sqrt(prec)
} "
data2_jags = list(neutrons = dat$V1, treatment = dat$V2, died = dat$V3)
params2 = c("int","b","mu","sig")
mod2 = jags.model(textConnection(mod2_string), data=data2_jags, n.chains=3)
update(mod2, 1e3)
mod2_sim = coda.samples(model=mod2,
variable.names=params2,
n.iter=1e4)
mod2_csim = as.mcmc(do.call(rbind, mod2_sim))
windows()
plot(mod2_sim,ask=T)
gelman.diag(mod2_sim)
autocorr.plot(mod2_sim)
dic2 = dic.samples(mod2, n.iter=1e3)
mean(mod2_csim[,"int[1]"]<mod2_csim[,"int[2]"])
mean(mod2_csim[,"int[1]"]>mod2_csim[,"int[2]"])
summary(mod2_csim)
windows()
plot(mod2_csim,ask=T)
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
head(dat)
dat$V1 <- scale(dat$V1, center = T, scale = T)
head(dat)
boxplot(dat$V1)
mod_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/25.0)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
} "
data_jags = list(neutrons = dat$V1, treatment = dat$V2, died = dat$V3)
params = c("b0","b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
tail(dat)
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
head(dat)
mod_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/25.0)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
} "
data_jags = list(neutrons = dat$V1, treatment = dat$V2, died = dat$V3)
params = c("b0","b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
head(dat$V1)
head(dat$V2)
dat$V4 <- scale(dat$V1, center = T, scale = T)
head(dat)
head(dat$V4)
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
dat$V4 <- scale(dat$V1, center = T, scale = T)
head(dat)
mod_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/25.0)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
} "
data_jags = list(neutrons = dat$V4, treatment = dat$V2, died = dat$V3)
params = c("b0","b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
dat$V4 <- scale(dat$V1, center = T, scale = T)
head(dat)
mod_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/25.0)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
} "
data_jags = list(neutrons = dat$V4, treatment = dat$V2, died = dat$V3)
params = c("b0","b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
dat$V4 <- scale(dat$V1, center = T, scale = T)
head(dat)
mod_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/25.0)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
} "
data_jags = list(neutrons = dat$V4, treatment = dat$V2, died = dat$V3)
params = c("b0","b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
dat$V4 <- scale(dat$V1, center = T, scale = T)
head(dat)
mod_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/25.0)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
} "
data_jags = list(neutrons = dat$V1, treatment = dat$V2, died = dat$V3)
params = c("b0","b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
hist(dat$V4)
dat$V4 <- (dat$V1-mean(dat$V1))/sd(dat$V1)
head(dat)
mod_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/25.0)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
} "
data_jags = list(neutrons = dat$V1, treatment = dat$V2, died = dat$V3)
params = c("b0","b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
head(dat$V4)
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
dat$V4 <- (dat$V1-mean(dat$V1))/sd(dat$V1)
head(dat)
mod_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/25.0)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
} "
data_jags = list(neutrons = dat$V4, treatment = dat$V2, died = dat$V3)
params = c("b0","b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
hist(dat$V4)
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
dat$V4 <- (dat$V1-mean(dat$V1))/sd(dat$V1)
head(dat)
mod_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/25.0)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
} "
data_jags = list(neutrons = dat$V4, treatment = dat$V2, died = dat$V3)
params = c("b0","b")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
mod_sim = coda.samples(model=mod,
variable.names=params,
n.iter=1e4)
mod_csim = as.mcmc(do.call(rbind, mod_sim))
plot(mod_sim)
gelman.diag(mod_sim)
dic = dic.samples(mod, n.iter=1e3)
dic
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
dat$V4 <- (dat$V1-mean(dat$V1))/sd(dat$V1)
head(dat)
mod1_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/25.0)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
}
} "
data1_jags = list(neutrons = dat$V4, treatment = dat$V2, died = dat$V3)
params = c("b0","b")
mod1 = jags.model(textConnection(mod1_string), data=data1_jags, n.chains=3)
update(mod1, 1e3)
mod1_sim = coda.samples(model=mod1,
variable.names=params1,
n.iter=1e4)
mod1_csim = as.mcmc(do.call(rbind, mod1_sim))
params1 = c("b0","b")
mod1 = jags.model(textConnection(mod1_string), data=data1_jags, n.chains=3)
update(mod1, 1e3)
mod1_sim = coda.samples(model=mod1,
variable.names=params1,
n.iter=1e4)
mod1_csim = as.mcmc(do.call(rbind, mod1_sim))
gelman.diag(mod1_sim)
dic1 = dic.samples(mod1, n.iter=1e3)
(dic1 = dic.samples(mod1, n.iter=1e3))
mod2_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = int[treatment[i]] + b[1]*neutrons[i]
}
for (k in 1:max(treatment)) {
int[k] ~ dnorm(mu, prec)
}
b[1] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
mu ~ dnorm(0, 1.0/1e4)
prec ~ dgamma(1.0,1.0)
sig = 1/sqrt(prec)
} "
data2_jags = list(neutrons = dat$V1, treatment = dat$V2, died = dat$V3)
params2 = c("int","b","mu","sig")
mod2 = jags.model(textConnection(mod2_string), data=data2_jags, n.chains=3)
update(mod2, 1e3)
mod2_sim = coda.samples(model=mod2,
variable.names=params2,
n.iter=1e4)
mod2_csim = as.mcmc(do.call(rbind, mod2_sim))
windows()
plot(mod2_sim,ask=T)
gelman.diag(mod2_sim)
autocorr.plot(mod2_sim)
(dic2 = dic.samples(mod2, n.iter=1e3))
dic1
dic2
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
dat$V4 <- (dat$V1-mean(dat$V1))/sd(dat$V1)
mod2_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = int[treatment[i]] + b[1]*neutrons[i]
}
for (k in 1:max(treatment)) {
int[k] ~ dnorm(mu, prec)
}
b[1] ~ ddexp(0.0, sqrt(2.0)) # has variance 1.0
mu ~ dnorm(0, 1.0/1e4)
prec ~ dgamma(1.0,1.0)
sig = 1/sqrt(prec)
} "
data2_jags = list(neutrons = dat$V4, treatment = dat$V2, died = dat$V3)
params2 = c("int","b","mu","sig")
mod2 = jags.model(textConnection(mod2_string), data=data2_jags, n.chains=3)
update(mod2, 1e3)
mod2_sim = coda.samples(model=mod2,
variable.names=params2,
n.iter=1e4)
mod2_csim = as.mcmc(do.call(rbind, mod2_sim))
gelman.diag(mod2_sim)
effectiveSize(mod2_sim)
autocorr.diag(mod2_sim)
summary(mod2_csim)
(dic2 = dic.samples(mod2, n.iter=1e3))
(mean(mod2_csim[,"int[1]"] > mod2_csim[,"int[2]"]))
pm_params2 = colMeans(mod2_csim)
logdied2_hat = pm_params2[2:3][dat$V2] + pm_params2["b"]*dat$V4
died2_hat = 1/(1+exp(-logdied2_hat))
decision2 = as.numeric(died2_hat>0.5)
resid2 = data2_jags$died - died2_hat
plot(jitter(resid2))
table(dat$V1, decision2)
table(dat$V3, decision2)
decision2 = as.numeric(died2_hat>0.6)
table(dat$V3, decision2)
decision1 = as.numeric(died1_hat>0.6)
table(dat$V3, decision1)
library("coda")
library("rjags")
dat = read.table("http://users.stat.ufl.edu/~winner/data/micerad.dat", header=F)
dat$V2 <- dat$V2+1
dat$V4 <- (dat$V1-mean(dat$V1))/sd(dat$V1)
head(dat)
table(dat$V3,dat$V1)
table(dat$V3,dat$V2)
lmod = lm(dat$V3~dat$V1+dat$V2)
anova(lmod)
plot(jitter(resid(lmod)))
y_hat = predict(lmod,dat[,1:2])
decision0 = as.numeric(y_hat > 0.5)
plot(jitter(dat$V3)~jitter(dat$V4),xlab="neutrons",ylab="died")
plot(jitter(dat$V3)~jitter(dat$V2),xlab="therapy",ylab="died")
table(dat$V3,dat$V2)
mod1_string = " model {
for (i in 1:length(died)) {
died[i] ~ dbern(p[i])
logit(p[i]) = b0 + b[1]*neutrons[i] + b[2]*treatment[i]
}
b0 ~ dnorm(0.0, 1.0/1e4)
for (j in 1:2) {
b[j] ~ ddexp(0.0, sqrt(2.0))
}
} "
data1_jags = list(neutrons = dat$V4, treatment = dat$V2, died = dat$V3)
params1 = c("b0","b")
mod1 = jags.model(textConnection(mod1_string), data=data1_jags, n.chains=3)
update(mod1, 1e3)
mod1_sim = coda.samples(model=mod1,
variable.names=params1,
n.iter=1e4)
mod1_csim = as.mcmc(do.call(rbind, mod1_sim))
windows()
plot(mod1_sim)
gelman.diag(mod1_sim)
autocorr.plot(mod1_sim)
effectiveSize(mod1_sim)
(dic1 = dic.samples(mod1, n.iter=1e3))
pm_params1 = colMeans(mod1_csim)
logdied1_hat = pm_params1["b0"] + pm_params1["b[1]"]*dat$V4 +pm_params1["b[2]"]*dat$V2
died1_hat = 1/(1+exp(-logdied1_hat))
decision1 = as.numeric(died1_hat>0.5)
resid1 = data1_jags$died - decision1
plot(jitter(resid1))
SQ1 = sum((data1_jags$died - decision1)^2)
decision2 = as.numeric(died2_hat>0.6)
table(dat$V3, decision2)
decision1 = as.numeric(died1_hat>0.6)
table(dat$V3, decision1)
